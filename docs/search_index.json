[["index.html", "A Quick Introduction to bbsBayes Chapter 1 Customized BBS trends, trajectories, graphs, and maps using the bbsBayes R-package, an Introduction 1.1 What is the workshop about? 1.2 Who should attend the workshop? 1.3 What we hope you will learn here", " A Quick Introduction to bbsBayes Adam C. Smith, and Brandon P.M. Edwards 2020-12-11 Chapter 1 Customized BBS trends, trajectories, graphs, and maps using the bbsBayes R-package, an Introduction 1.1 What is the workshop about? This is a 2-hour introductory workshop/demonstration of the R-package bbsBayes (https://github.com/BrandonEdwards/bbsBayes). This package allows anyone to apply the hierarchical Bayesian models used to estimate status and trends from the North American Breeding Bird Survey. The package also lets the user generate a suite of alternative metrics using the existing model output from the annual CWS analyses. 1.2 Who should attend the workshop? Everyone is welcome! Some familiarity working with R is required if youd also like to run the code yourself during the workshop, and the relevant packages should be installed beforehand (details will be provided with a full outline to be provided closer to the date). Those who might particularly be interested in attending include: Anyone who might wish for a BBS trend for a particular region or time-period (e.g,. I want 15-year trends not 10-year trends, I wish I had a trend for just the western portion of the Barn Swallows range), Anyone who might want to analyse the BBS with a customized model (e.g., the effect of weather, land-cover, etc. on trends). Do not worry if Bayesian analyses are new to you. We will not review the basics of Bayesian statistical analyses, but the package can be very useful without understanding those basics. 1.3 What we hope you will learn here Download the raw data Choose and run a model, geographic stratification, and species (we will not cover formal model-selection, just explore the different model-options) Estimate trends for any time-period (1970-2019, 2005-2015, 1980-2000, etc.) Graph population trajectories Generate heat maps of population trends Create geofaceted trajectory plots Estimate trends for customized regions (e.g., All of the eastern Boreal, Great Plains vs eastern populations of grassland birds) "],["Intro.html", "Chapter 2 Preparation and Installation 2.1 Pre-Workshop preparation 2.2 Installation 2.3 Data Retrieval 2.4 Install JAGS", " Chapter 2 Preparation and Installation 2.1 Pre-Workshop preparation We will present this initial workshop primarily as a demonstration. So you do not need to run any actual code, in order to get a good sense of what the package can do. If you are reasonably familiar with using R, and you do want to follow along with the coding during the workshop, please ensure you have installed the most recent version of R (4.0.3) and Rstudio. I addition, please install the bbsBayes package and download the data. Finally, if you havent used JAGS before, youll also need to install this stand-alone program (the Bayesian MCMC software that the package relies on). Follow the link below to download the installer. 2.2 Installation bbsBayes is on CRAN! There are two ways to install the package: Option 1: Stable release from CRAN # To install from CRAN: install.packages(&quot;bbsBayes&quot;) Option 2: Less-stable development version # To install the development version from GitHub: install.packages(&quot;devtools&quot;) library(devtools) devtools::install_github(&quot;BrandonEdwards/bbsBayes&quot;) 2.3 Data Retrieval You can download BBS data by running fetch_bbs_data. This will save the data to a package-specific directory on your computer. You must agree to the terms and conditions of the data usage before the download will run [type yes at the prompt]. You only need run this function once for each annual update of the BBS database. fetch_bbs_data() There are options to download the available stop-level data, so you can use the package to access these data. However, for now the bbsBayes modeling functions only work with the route-level summaries. So use the defaults in the function. 2.4 Install JAGS The modeling functions of bbsBayes require an installation of JAGS. JAGS is installed from SourceForge, an open software distribution agent. Follow this link to install [https://sourceforge.net/projects/mcmc-jags/]. "],["Stratify.html", "Chapter 3 Stratification and model options 3.1 Strata", " Chapter 3 Stratification and model options 3.1 Strata All of the models supported by bbsBayes expect the BBS route-level data to be grouped into geographic strata. These strata are subregions of the survey area, and allow the parameters that model abundance and trend to vary across a species range. Use the stratify() function to group the BBS data into one of the included stratifications. Select the stratification using the argument by to stratify by the following options: bbs_cws  stratify(by = \"bbs_cws\") Political region X Bird Conservation region intersection (Canadian Wildlife Service [CWS] method). Identical to bbs_usgs, except all routes in BCR 7 are combined into a single stratum, and all routes in PEI and Nova Scotia are combined into a single stratum. bbs_usgs  stratify(by = \"bbs_usgs\") Political region X Bird Conservation region intersection (United Status Geological Survey [USGS] method) bcr  stratify(by = \"bcr\") Bird Conservation Region only state  stratify(by = \"state\") Political Region only latlong  stratify(by = \"latlong\") Degree blocks (1 degree of latitude X 1 degree of longitude) # set up for the annual CWS status and trend analysis strat_data &lt;- stratify(by = &quot;bbs_cws&quot;) The stratified_data object includes 3 dataframes. strat_data$species_strat is a table of all species included in the dataset. It has columns for species common names in English, French, and Spanish, as well as information on the order, family, genus, species, and the numerical species indicators used in the BBS database in both character format (with leading 0s) and integer format. knitr::kable(head(strat_data$species_strat[,c(3,4,5,8,9,10)])) english french spanish genus species sp.bbs Black-bellied Whistling-Duck Dendrocygne à ventre noir Dendrocygna autumnalis Dendrocygna autumnalis 1770 Fulvous Whistling-Duck Dendrocygne fauve Dendrocygna bicolor Dendrocygna bicolor 1780 Emperor Goose Oie empereur Anser canagicus Anser canagicus 1760 Snow Goose (all forms) Oie des neiges (toutes les formes) Anser caerulescens Anser caerulescens 1690 (Blue Goose) Snow Goose Oie des neiges (forme bleue) Anser caerulescens (blue form) Anser caerulescens (blue form) 1691 Rosss Goose Oie de Ross Anser rossii Anser rossii 1700 strat_data$bird_strat is a very large table of each observed count for a given species * route * year combination. This is the table that includes all of the non-zero observations in the BBS database. knitr::kable(head(strat_data$bird_strat[,c(1,2,6,7,14,16,17)])) statenum Route Year AOU SpeciesTotal rt.uni rt.uni.y 11 1 1997 5880 28 11-1 11-1-1997 11 1 1997 5671 6 11-1 11-1-1997 11 1 1997 6850 3 11-1 11-1-1997 11 1 1991 6882 22 11-1 11-1-1991 11 1 2012 3160 1 11-1 11-1-2012 11 1 1991 4860 9 11-1 11-1-1991 strat_data$route_strat is a large table of each BBS survey conducted. It includes a single row for each survey-event (i.e., a route * year * observer combination). It also includes the information on the weather conditions, timing, date, etc. knitr::kable(head(strat_data$route_strat[,c(2,3,8,13,33:35)])) statenum Route BCR Year strat_name rt.uni rt.uni.y 11 1 5 1995 CA-BC-5 11-1 11-1-1995 11 1 5 1994 CA-BC-5 11-1 11-1-1994 11 1 5 1976 CA-BC-5 11-1 11-1-1976 11 1 5 1977 CA-BC-5 11-1 11-1-1977 11 1 5 1974 CA-BC-5 11-1 11-1-1974 11 1 5 1975 CA-BC-5 11-1 11-1-1975 3.1.1 Useful code to access and print the strata maps above The package does not include functions to directly access the strata maps (other than the generate_map() function, which displays a map of estimated trends). However this code below should suffice to find the map files in your local installation. library(sf) library(sp) library(ggplot2) laea = st_crs(&quot;+proj=laea +lat_0=40 +lon_0=-95&quot;) # Lambert equal area coord reference system strat_maps &lt;- c(&quot;BBS_CWS_strata&quot;, &quot;BBS_USGS_strata&quot;, &quot;BBS_BCR_strata&quot;, &quot;BBS_LatLong_strata&quot;, &quot;BBS_ProvState_strata&quot;) names(strat_maps) &lt;- c(&quot;bbs_cws&quot;,&quot;bbs_usgs&quot;,&quot;bcr&quot;,&quot;latlong&quot;,&quot;state&quot;) locat = system.file(&quot;maps&quot;, package = &quot;bbsBayes&quot;) for(i in 1:length(strat_maps)){ map.file = strat_maps[i] st_nm = names(strat_maps)[i] strata_map = read_sf(dsn = locat, layer = map.file) strata_map = st_transform(strata_map,crs = laea) st_gg = ggplot(data = strata_map)+ geom_sf()+ labs(title = paste(&quot;stratify(by =&quot;,st_nm,&quot;)&quot;)) png(paste0(&quot;images/map_&quot;,st_nm,&quot;.png&quot;)) print(st_gg) dev.off() } "],["DataPrep.html", "Chapter 4 Prepare the data for a model and species 4.1 Prepare data for a model and species 4.2 Models 4.3 CWS analysis example", " Chapter 4 Prepare the data for a model and species 4.1 Prepare data for a model and species The prepare_jags_data() function is used to select a species, a model, the time-scale, etc. The critical arguments are: strat_data: the list of stratified data returned by stratify() species_to_run: the English name for the species. this is currently case sensitive, and must exactly match one of the names in the english column of the species_strat object of strat_data i.e., strat_data$species_strat$english If youd like to export a full list of the available species, this code will work: write.csv(strat_data$species_strat,&quot;Full_BBS_speciesList.csv&quot;) Also, if you&#39;d like to select a species using the French name, you can try this: espece = &quot;Colibri à gorge rubis&quot; species = strat_data$species_strat$english[which(strat_data$species_strat$french == espece)] species #&gt; [1] &quot;Ruby-throated Hummingbird&quot; model: the model to use, options are slope, firstdiff, gam, or gamye There are additional, optional arguments: heavy_tailed - Logical indicating whether the extra-Poisson error distribution should be modeled as a t-distribution, with heavier tails than the standard normal distribution. Default is currently FALSE, but recent research suggest users should strongly consider setting this to TRUE, even though it requires much longer convergence times n_knots - Number of knots to be used in GAM function min_year - Minimum year to keep in analysis max_year - Maximum year to keep in analysis min_n_routes - Minimum routes per strata where species has been observed. Defaults to 3, but consider lowering to 1 if using the latlong stratification min_max_route_years - Minimum number of years with non-zero observations of species on at least 1 route. Defaults to 3 min_mean_route_years - Minimum average of years per route with the species observed. Defaults to 1. 4.2 Models The package has (currently) four status and trend models that differ in the way they model the time-series of observations. The four model options are slope, gam, gamye, and firstdiff. 4.2.1 slope The slope option estimates the time series as a log-linear regression with random year-effect terms that allow the trajectory to depart from the smooth regression line. It is the model used by the USGS and CWS to estimate bbs trends between 2011 and 2018. The basic model was first described in 2002 ((Link and Sauer 2002a)) and its application to the annual status and trend estimates is documented in (Sauer and Link 2011) and (Smith et al. 2014). 4.2.2 gam The gam option models the time series as a semiparametric smooth using a Generalized Additive Model (GAM) structure that shares information among the strata on the shape of the population trajectory. This model is described in (Smith and Edwards 2020). 4.2.3 gamye The gamye option includes the semiparametric smooth used in the gam option, but also includes random year-effect terms that track annual fluctuations around the smooth, also in (Smith and Edwards 2020). This is the model that the Canadian Wildlife Service is now using for the annual status and trend estimates. 4.2.4 firstdiff The firstdiff option models the time-series as a random-walk from the first year, so that the first-differences of the sequence of year-effects are random effects with mean = 0 and an estimated variance. This model has been described in (Link, Sauer, and Niven, n.d.). The first difference model is unique among these four in that it does not share information across the strata on the rate of population change. The population trajectories in each stratum are estimated independently of all other strata. 4.3 CWS analysis example The annual CWS analysis uses the heavy-tailed version of the GAMYE model. Heres the data function call that is used in the 2019 analysis for Scarlet Tanager: jags_data &lt;- prepare_jags_data(strat_data = strat_data, species_to_run = &quot;Scarlet Tanager&quot;, model = &quot;gamye&quot;, min_max_route_years = 2, heavy_tailed = TRUE) "],["ModelRun.html", "Chapter 5 Running the model", " Chapter 5 Running the model # set up for the annual CWS status and trend analysis # strat_data &lt;- stratify(by = &quot;bbs_cws&quot;) # jags_data &lt;- prepare_jags_data(strat_data = strat_data, # species_to_run = &quot;Scarlet Tanager&quot;, # model = &quot;gamye&quot;, # min_max_route_years = 2, # heavy_tailed = TRUE) ### previous lines were run to produce this .RData file: load(&quot;data/jags_data_Scarlet_Tanager.RData&quot;) After stratifying and preparing the data for a particular species and model, the run_model() function calls the JAGS program to fit the selected model to the species data. Depending on the model and the size of the dataset (number of counts, number of strata, number of years, etc.), this process can take a long time (hours - days). The following code would shows the settings used for most species in the annual CWS analysis. # Not Run # jags_mod &lt;- run_model(jags_data = jags_data, # n_iter = 24000, #higher than the default 10,000 # n_burnin = 20000, # n_chains = 3, # n_thin = 20, #saves memory by retaining only 1/20 posterior samples # parallel = TRUE, # inits = NULL, # parameters_to_save = c(&quot;n&quot;,&quot;n3&quot;,&quot;nu&quot;,&quot;B.X&quot;,&quot;beta.X&quot;,&quot;strata&quot;,&quot;sdbeta&quot;,&quot;sdX&quot;,&quot;alpha&quot;)) Heres a toy example using data for the Pacific Wren and the slope model for a shortened time-series: #strat_data &lt;- stratify(by = &quot;bbs_cws&quot;) # Prepare the stratified data for use in a JAGS model. jags_data &lt;- prepare_jags_data(strat_data = strat_data, species_to_run = &quot;Pacific Wren&quot;, model = &quot;slope&quot;, min_year = 2009, max_year = 2018) jags_mod &lt;- run_model(jags_data = jags_data, n_adapt = 100, n_burnin = 200, n_iter = 200, n_thin = 1, parameters_to_save = c(&quot;n&quot;)) There is only one critical argument in the run_model() function. jags_data - List output from the prepare_jags_data() function. The remaining arguments allow for some customization of the MCMC process. The default settings are sufficient for many species and model combinations, but here is some explanation of the arguments that many users may want to modify: parameters_to_save - Character vector of parameters to monitor in JAGS. Defaults to just monitoring n, the annual indices of abundance that make up the estimated population trajectories in each stratum. In the two models with separate parameters for the year-effects and the long-term change (gamye and slope), there is an optional version of the annual indices of abundance called n3, which tracks the population trajectory after removing the year-effects. This n3 parameter represents the smooth-only population trajectory from the gamye and the linear-slope component of the trajectory from the slope model. In the CWS annual analyses, the n3 parameter is used to estimate trends and the n parameter is used to track the full population trajectory. n_chains - Optional number of chains to run. Defaults to 3. n_burnin - Optional integer specifying the number of iterations to burn in the model. Defaults to 20000 per chain. n_thin - Optional number of steps to thin or discard. Defaults to 10 n_iter - Optional number of iterations per chain. Defaults to 10000. parallel - Logical, Should each chain be run in parallel on separate cores? If TRUE, the number of cores used will be the minimum of the n_chains specified and the number of cores on your computer "],["IndicesTrends.html", "Chapter 6 Estimating Annual Indices and Trends 6.1 Annual Indices 6.2 Population Trends 6.3 Alternative time-spans for trends 6.4 Alternative definitions of trends", " Chapter 6 Estimating Annual Indices and Trends Once the model has finished running, we can use the saved output to calculate the population trajectories and trends. As an example, well load the 2019 CWS saved model output for Scarlet Tanager, from the gamye model. This saved workspace includes two objects: 1. jags_data - the data object created with the prepare_jags_data() function. jags_mod - the model output created with the run_model() function. load(&quot;data/jags_mod_full_Scarlet_Tanager.RData&quot;) 6.1 Annual Indices The annual indices of relative abundance (annual indices) from all of the bbsBayes models represent the expected mean count on the BBS routes in a given region and year. The time-series of these annual indices in a given region make up the estimated population trajectory. indices &lt;- generate_indices(jags_mod = jags_mod, jags_data = jags_data) ## Note: this function can take ~20 minutes to run for a species with a broad range (many strata) and if the model run included a long time-series (many years). By default, this function generates estimates for the continent (i.e., survey-wide) and for the individual strata. However, if using one of the two BBS stratifications bbs_usgs or bbs_cws, the user can also select summaries for composite regions (regions made up of collections of strata), such as countries, provinces/states, Bird Conservation Regions, etc. indices &lt;- generate_indices(jags_mod = jags_mod, jags_data = jags_data, regions = c(&quot;continental&quot;, &quot;national&quot;, &quot;prov_state&quot;, &quot;stratum&quot;)) #also &quot;bcr&quot;, #BCR specific estimates # &quot;bcr_by_country&quot; #e.g., splits the BCRs along the national borders The generate_indices() function creates a list that includes an object called data_summary, which is a dataframe with all of the estimated annual indices indices$data_summary. knitr::kable(head(indices$data_summary[,c(1,2,4,7,8,13,14,15,16)])) Year Region Region_type Index Index_q_0.025 Index_q_0.975 obs_mean nrts nnzero 1966 Continental continental 1.06 0.957 1.19 0.675 325 173 1967 Continental continental 1.02 0.930 1.12 0.677 546 277 1968 Continental continental 1.04 0.964 1.13 0.797 516 270 1969 Continental continental 1.04 0.972 1.12 0.877 692 352 1970 Continental continental 1.03 0.966 1.10 0.826 733 387 1971 Continental continental 1.06 1.007 1.14 0.974 779 404 For example, one may wish to export the annual indices to a text file that can be read using excel. write.csv(indices$data_summary,&quot;Scarlet_Tanager_trajectories.csv&quot;) The list also includes a number of other objects that retain the stratification information, strata area_weights, and the full posterior samples for every estimated annual index. Generally these other objects are only used by subsequent functions and the user wont access them directly. The function also accepts the alternative annual indices, such as the smooth-only indices from the gamye model. indices_smooth &lt;- generate_indices(jags_mod = jags_mod, jags_data = jags_data, alternate_n = &quot;n3&quot;, regions = c(&quot;continental&quot;, &quot;national&quot;, &quot;prov_state&quot;, &quot;stratum&quot;)) #also &quot;bcr&quot;, #BCR specific estimates # &quot;bcr_by_country&quot; #e.g., splits the BCRs along the national borders 6.2 Population Trends Population trends can be calculated from the output of generate_indices(). The trends are expressed as geometric mean rates of change (%/year) between two points in time. \\(Trend = (\\frac {n[Minyear]}{n[Maxyear]})^{(1/(Maxyear-Minyear))}\\) trends &lt;- generate_trends(indices = indices, Min_year = 1970, Max_year = 2019) The generate_trends() function returns a dataframe with 1 row for each unit of the region-types requested (i.e., 1 row for each stratum, 1 continental, etc.). The dataframe has at least 27 columns that report useful information related to each trend, including the start and end year of the trend, lists of included strata, total number of routes, number of strata, mean observed counts, and estimates of the % change in the population between the start and end years. knitr::kable(head(trends[,c(1,3,8,9,14)])) Start_year Region Trend Trend_Q0.025 Trend_Q0.975 1970 Continental 0.041 -0.141 0.222 1970 CA -0.439 -1.090 0.171 1970 US 0.097 -0.090 0.288 1970 AL 1.956 0.797 3.102 1970 AR 0.306 -0.684 1.335 1970 CT -0.580 -1.633 0.432 The generate_trends function includes some other arguments that allow the user to adjust the quantiles used to summarize uncertainty (e.g., interquartile range of the trend estiamtes, or the 67% CIs), as well as include additional calculations, such as the probability a population has declined (or increased) by &gt; X%. trends &lt;- generate_trends(indices = indices, Min_year = 2009, Max_year = 2019, prob_decrease = c(30,50), prob_increase = c(0)) knitr::kable(head(trends[,c(1,4,8,15,22)])) Start_year Region_alt Trend Percent_Change prob_decrease_30_percent 2009 Continental -0.816 -7.87 0.000 2009 Canada -0.114 -1.13 0.001 2009 United States of America -0.884 -8.49 0.000 2009 ALABAMA -1.121 -10.66 0.046 2009 ARKANSAS 0.631 6.49 0.010 2009 CONNECTICUT -2.625 -23.35 0.335 And trends calculated from the smooth component only can be derived from the related annual indices. trends_smooth &lt;- generate_trends(indices = indices_smooth, Min_year = 2009, Max_year = 2019, prob_decrease = c(30,50), prob_increase = c(0)) 6.3 Alternative time-spans for trends It is simple to estimate trends for alternative intervals of time. For example, calculating a 15 year trend for Scarlet Tanager. trends_smooth_15 &lt;- generate_trends(indices = indices_smooth, Min_year = (2019-15), Max_year = 2019, prob_decrease = c(30,50), prob_increase = c(0)) Or, a 15-year trend for the previous 15 years, i.e., the interval from 1989-2004: trends_smooth_15alt &lt;- generate_trends(indices = indices_smooth, Min_year = 1989, Max_year = 2004, prob_decrease = c(30,50), prob_increase = c(0)) 6.4 Alternative definitions of trends The end-point trend definition introduced by (Link and Sauer 2002b) is only one possible metric to measure a population trend. The default trend calculation is an interval-specific estimate of the geometric mean annual change in the population. \\(Trend = (\\frac {n[Minyear]}{n[Maxyear]})^{(1/(Maxyear-Minyear))}\\) It relies on a comparison of the annual indices in the first and last years of the trend period to quantify the mean rate of population change. However, it ignores the pattern of change between the two end-points. The user can choose an alternative estimate of change that is calculated by fitting a log-linear slope to the series of all annual indices between the two end-points (e.g., all 11 years in a 10-year trend from 2008-2018). The slope of this line could be expressed as an average annual percent change across the time-period of interest. If working with estimates derived from a model with strong annual fluctuations and for which no decomposition is possible (e.g., firstdiff model), this slope-based trend may be a more comprehensive measure of the average population change, that is less dependent on the particular end-point years. These slope trends can be added to the trend output table by setting the slope = TRUE argument in generate_trends(). The standard trends are still calculated, but additional columns are added that include the alternate estimates. NOTE: the generate_map() function can map slope trends as well with the same slope = TRUE argument. For example, we could use the full annual indices from the gamye model (indices including the annual fluctuations) to calculate both the default end-point trends and the alternative slope trends. trends_15_slope &lt;- generate_trends(indices = indices, Min_year = (2019-15), slope = TRUE, Max_year = 2019, prob_decrease = c(30,50), prob_increase = c(0)) Setting slope = TRUE adds the slope-trend calculation to the output dataframe. Note: The probabilities of decrease and increase values are not based on the slope metric, they are always a function of the difference in population between the start and end of the time-interval. knitr::kable(head(trends_15_slope[,c(1,4,8,22)])) Start_year Region_alt Trend Slope_Trend 2004 Continental -0.793 -1.040 2004 Canada -0.004 -0.218 2004 United States of America -0.866 -1.115 2004 ALABAMA -0.521 -0.728 2004 ARKANSAS 0.769 0.328 2004 CONNECTICUT -1.956 -2.186 6.4.1 Percent Change and probability of change The generate_trends() function also produces estimates of the overall percent-change in the population between the first and last years of the trend-period. This calculation is often easier to interpret than an average annual rate of change. These percent change estimates have associated uncertainty bounds, and so can be helpful for deriving statements such as between 2008 and 2018, the population has declined by 20 percent, but that estimate is relatively uncertain and the true decline may be as little as 2 percent or as much as 50 percent In addition, the function can optionally calculate the posterior conditional probability that a population has changed by at least a certain amount, using the prob_decrease and prob_increase arguments. These values can be useful for deriving statements such as our model suggests that there is a 95% probability that the species has increased (i.e., &gt; 0% increase) and a 45 percent probability that the species has increased more than 2-fold (i.e., &gt; 100% increase) knitr::kable(head(trends_smooth_15[,c(1,4,8,15,22)])) Start_year Region_alt Trend Percent_Change prob_decrease_30_percent 2004 Continental -0.798 -11.32 0.000 2004 Canada 0.182 2.77 0.000 2004 United States of America -0.888 -12.52 0.000 2004 ALABAMA -0.260 -3.83 0.008 2004 ARKANSAS 0.404 6.23 0.009 2004 CONNECTICUT -1.774 -23.54 0.344 "],["GraphMap.html", "Chapter 7 Trajectory graphs and trend maps 7.1 Graphing the trajectories (annual indices) 7.2 Mapping the trends 7.3 Geofacet Trajectories", " Chapter 7 Trajectory graphs and trend maps Now that we have calculated values for the trends and trajectories, bbsBayes also includes functions to plot and map the values. # load the trend and indices objects for Scarlet Tanager load(&quot;Scarlet_Tanager_trends_indices.RData&quot;) 7.1 Graphing the trajectories (annual indices) The plot_indices() function produces a list of ggplot figures that can be combined into a single pdf file, or printed to individual devices. tp = plot_indices(indices = indices, species = &quot;Scarlet Tanager&quot;) # pdf(file = &quot;Scarlet Tanager Trajectories.pdf&quot;) # print(tp) # dev.off() print(tp[[1]]) plot_indices() also allows the user to add points to show the observed mean counts as well as stacked dots to indicate the number of observations in each year. tp2 = plot_indices(indices = indices, species = paste(&quot;Scarlet Tanager&quot;,&quot;Full&quot;), add_observed_means = TRUE, add_number_routes = TRUE) # pdf(file = &quot;Scarlet Tanager Trajectories plus.pdf&quot;) # print(tp) # dev.off() And we can compare these indices plots with those generated using only the smooths. tp3 = plot_indices(indices = indices_smooth, species = paste(&quot;Scarlet Tanager&quot;,&quot;Smooth&quot;), add_observed_means = TRUE, add_number_routes = TRUE) # pdf(file = &quot;Scarlet Tanager Trajectories smooth plus.pdf&quot;) # print(tp) # dev.off() library(patchwork) print(tp2[[1]]+tp3[[1]]) 7.2 Mapping the trends The trends can be mapped to produce strata maps coloured by species population trends. mp = generate_map(trends_smooth, select = TRUE, stratify_by = &quot;bbs_cws&quot;, species = &quot;Scarlet Tanager Smooth&quot;) print(mp) 7.3 Geofacet Trajectories For stratifications that can be compiled by political regions (i.e., bbs_cws, bbs_usgs, or state), the function geofacet_plot will generate a ggplot object that plots the state and province level population trajectories in facets arranged in an approximately geographic arrangement. These plots offer a concise, range-wide summary of a species population trajectory. gf &lt;- geofacet_plot(indices_list = indices_smooth, select = TRUE, stratify_by = &quot;bbs_cws&quot;, multiple = TRUE, trends = trends_smooth, slope = F, species = &quot;Scarlet Tanager Smooth&quot;) #png(&quot;SCTA_geofacet.png&quot;,width = 1500, height = 750,res = 150) print(gf) #dev.off() "],["Adv.html", "Chapter 8 Advanced options 8.1 Custom regional summaries 8.2 Exporting the JAGS model 8.3 Customizing the JAGS model and data 8.4 Comparing Models", " Chapter 8 Advanced options 8.1 Custom regional summaries Yes, you can calculate the trend and trajectories for custom combinations of strata, such as the trends for Eastern and Western populations of Horned Lark. #stratification &lt;- &quot;bbs_cws&quot; #strat_data &lt;- stratify(by = stratification, sample_data = TRUE) jags_data &lt;- prepare_jags_data(strat_data, species_to_run = &quot;Lincoln&#39;s Sparrow&quot;, model = &quot;gamye&quot;) #jags_mod &lt;- run_model(jags_data = jags_data) Assuming the above setup has been run. The user could then generate population trajectories using a customized grouping of the original strata. First extract a dataframe that defines the original strata used in the analysis. st_comp_regions &lt;- get_composite_regions(strata_type = &quot;bbs_cws&quot;) knitr::kable(head(st_comp_regions)) prov_state region area_sq_km national bcr Province_State Country bcr_by_country AB CA-AB-10 52565 CA 10 Alberta Canada Canada-BCR_10 AB CA-AB-6 445136 CA 6 Alberta Canada Canada-BCR_6 AB CA-AB-8 6987 CA 8 Alberta Canada Canada-BCR_8 AB CA-AB-11 149352 CA 11 Alberta Canada Canada-BCR_11 AK US-AK-1 9551 US 1 ALASKA United States of America United States of America-BCR_1 AK US-AK-2 283405 US 2 ALASKA United States of America United States of America-BCR_2 The add a column to the dataframe that groups the original strata into the desired custom regions. st_comp_regions$East_West &lt;- ifelse(st_comp_regions$bcr %in% c(7,8,12:14,22:31),&quot;East&quot;,&quot;West&quot;) st_comp_regions can now be used as the dataframe input to the argument alt_region_names in generate_indices(), with East_West as the value for the argument regions. The relevant trends can be calculated using just the generate_trends() function. east_west_indices &lt;- generate_indices(jags_mod = jags_mod, jags_data = jags_data, alt_region_names = st_comp_regions, regions = &quot;East_West&quot;) east_west_trends &lt;- generate_trends(indices = east_west_indices) knitr::kable(east_west_trends[,c(1,3,8,9,14)]) 8.2 Exporting the JAGS model You can easily export any of the bbsBayes models to a text file. model_to_file(model = &quot;slope&quot;, filename = &quot;my_slope_model.txt&quot;) Then, you can modify the model text (e.g., try a different prior) and run the modified model run_model &lt;- function(... , model_file_path = &quot;my_modified_slope_model.txt&quot;, ... ) Details coming soon 8.3 Customizing the JAGS model and data You can even export the bbsBayes model as text, and modify it to add in covariates. For example a GAM smooth to estimate the effect of the day of year on the observations, or an annual weather covariate, or Then add the relevant covariate data to the jags_data object, and youre off! Well add some more details and examples soon. 8.4 Comparing Models Finally, bbsBayes can be used to run Bayesian cross-validations. For example, the get_final_values() function is useful to provide an efficient starting point for a cross-validation runs, without having to wait for another full burn-in period. Paper that includes an example of how to implement a cross-validation using bbsBayes. Pre-print: https://doi.org/10.1101/2020.03.26.010215 Supplement: https://zenodo.org/badge/latestdoi/228419725 NOTE: although bbsBayes includes functions to calculate WAIC, recent work has shown that WAIC performs very poorly with the BBS data (https://doi.org/10.1650/CONDOR-17-1.1). We recommend a k-fold cross-validation approach, as in the above zenodo archive. "],["Ref.html", "Chapter 9 References", " Chapter 9 References Link, William A., and John R. Sauer. 2002a. A Hierarchical Analysis of Population Change with Application to Cerulean Warblers. Ecology 83 (10): 283240. https://doi.org/10.1890/0012-9658(2002)083[2832:AHAOPC]2.0.CO;2. . 2002b. A Hierarchical Analysis of Population Change with Application to Cerulean Warblers. Ecology 83 (10): 283240. https://doi.org/10.1890/0012-9658(2002)083[2832:AHAOPC]2.0.CO;2. Link, William A., John R. Sauer, and Daniel K. Niven. n.d. Model Selection for the North American Breeding Bird Survey. Ecological Applications n/a (n/a). https://doi.org/10.1002/eap.2137. Sauer, John R., and William A. Link. 2011. Analysis of the North American Breeding Bird Survey Using Hierarchical Models. The Auk 128 (1): 8798. https://doi.org/10.1525/auk.2010.09220. Smith, Adam C., and Brandon P.M. Edwards. 2020. North American Breeding Bird Survey Status and Trend Estimates to Inform a Wide-Range of Conservation Needs, Using a Flexible Bayesian Hierarchical Generalized Additive Model. https://doi.org/10.1101/2020.03.26.010215. Smith, Adam C., Marie-Anne R. Hudson, Constance Downes, and Charles M. Francis. 2014. Estimating Breeding Bird Survey Trends and Annual Indices for Canada: How Do the New Hierarchical Bayesian Estimates Differ from Previous Estimates? The Canadian Field-Naturalist 128 (2): 119. https://doi.org/10.22621/cfn.v128i2.1565. "]]
